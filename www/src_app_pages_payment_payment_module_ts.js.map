{"version":3,"file":"src_app_pages_payment_payment_module_ts.js","mappings":"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","sources":["./src/app/pages/payment/payment-routing.module.ts","./src/app/pages/payment/payment.module.ts","./src/app/pages/payment/payment.page.ts","./src/app/pages/payment/payment.page.html"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { PaymentPage } from './payment.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: PaymentPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class PaymentPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { PaymentPageRoutingModule } from './payment-routing.module';\n\nimport { PaymentPage } from './payment.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    ReactiveFormsModule,\n    PaymentPageRoutingModule\n  ],\n  declarations: [PaymentPage]\n})\nexport class PaymentPageModule {}\n","import { Component, OnInit, AfterViewInit, ViewChild, ElementRef } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AlertController, LoadingController } from '@ionic/angular';\nimport { PaymentService } from '../../services/payment.service';\nimport { AvatarService } from '../../services/avatar.service';\nimport { Router } from '@angular/router';\nimport { Card } from 'src/app/interfaces/card';\n\ndeclare var Stripe: any;\n\n@Component({\n  selector: 'app-payment',\n  templateUrl: './payment.page.html',\n  styleUrls: ['./payment.page.scss'],\n})\nexport class PaymentPage implements OnInit, AfterViewInit {\n  @ViewChild('cardElement', { static: false }) cardElement: ElementRef;\n  paymentForm: FormGroup;\n  loading: HTMLIonLoadingElement;\n  stripe: any;\n  elements: any;\n  card: any;\n  approve: boolean = false;\n  cardInitialized: boolean = false;\n  selectedProvider: string = '';\n  savedPaymentMethods: Card[] = [];\n  selectedCardId: string = '';\n  defaultAmount: number = 1000;\n  isCardComplete: boolean = false; // New state for card completion\n\n  constructor(\n    private fb: FormBuilder,\n    private alertController: AlertController,\n    private loadingController: LoadingController,\n    private paymentService: PaymentService,\n    private avatarService: AvatarService  ) {\n    this.paymentForm = this.fb.group({\n      provider: ['', Validators.required],\n      cardId: [''],\n      authCode: ['']\n    });\n  }\n\n  ngOnInit() {\n    this.fetchSavedPaymentMethods();\n    this.onPaymentProviderChange('stripe');\n    this.getActiveCard();\n  }\n\n  ngAfterViewInit() {}\n\n  // Ensure Stripe card is initialized\n  initializeStripeCard() {\n    if (this.cardElement && this.cardElement.nativeElement) {\n      this.stripe = Stripe('pk_test_0t85o0Llo0MbBfC9imSzznam');\n      this.elements = this.stripe.elements();\n      if (!this.card) {\n        this.card = this.elements.create('card');\n        this.card.mount(this.cardElement.nativeElement);\n        // Listen for changes on the card input\n        this.card.on('change', event => {\n          this.isCardComplete = event.complete;\n        });\n      }\n      this.cardInitialized = true;\n    }\n  }\n\n  onPaymentProviderChange(provider: string) {\n    this.selectedProvider = provider;\n    this.paymentForm.patchValue({ provider });\n\n    if (provider === 'stripe') {\n      setTimeout(() => {\n        this.initializeStripeCard();\n      }, 0);\n    }\n  }\n\n  async fetchSavedPaymentMethods() {\n    try {\n      this.savedPaymentMethods = await this.avatarService.getSavedPaymentMethods();\n      console.log('Saved Payment Methods:', this.savedPaymentMethods);\n      if (this.savedPaymentMethods.length > 0) {\n        this.selectedCardId = this.savedPaymentMethods[0].cardId; // Set default selected card\n      }\n    } catch (error) {\n      console.error('Error fetching saved payment methods:', error);\n    }\n  }\n\n  async getActiveCard() {\n    const email = this.avatarService.user.email;\n    this.avatarService.getActiveCard(email).subscribe((data: any) => {\n      if (data && data.activeCardId) {\n        this.selectedCardId = data.activeCardId;\n      }\n    });\n  }\n\n  async setActiveCard(event: any) {\n    const cardId = event.detail.value;\n    if (cardId) {\n      try {\n        const email = this.avatarService.user.email;\n        await this.avatarService.setActiveCard(email, cardId);\n        this.selectedCardId = cardId;\n      } catch (error) {\n        console.error('Error setting active card:', error);\n      }\n    }\n  }\n\n  async processPayment() {\n    if (this.paymentForm.valid) {\n      const formValues = this.paymentForm.value;\n      formValues.email = this.avatarService.user.email; // Use email from avatarService\n  \n      this.showLoading();\n  \n      try {\n        let paymentResult;\n        paymentResult = await this.processStripePayment(formValues);\n\n        console.log('Payment successful:', paymentResult);\n        await this.showAlert('Success', 'Payment successful!');\n        await this.avatarService.updateFirestoreAfterPayment(paymentResult);\n  \n      } catch (error) {\n        console.error('Error during payment:', error);\n        const errorMessage = error.error ? error.error.error : 'An unexpected error occurred.';\n        await this.showAlert('Error', `Payment failed: ${errorMessage}`);\n      } finally {\n        this.hideLoading();\n        this.approve = false;\n      }\n    } else {\n      this.showAlert('Form Error', 'Please fill out all required fields.');\n    }\n  }\n\n  async processStripePayment(formValues) {\n    console.log('Starting processStripePayment with formValues:', formValues);\n  \n    try {\n      const setupIntentResponse = await this.paymentService.createSetupIntent(formValues.email).toPromise();\n      const clientSecret = setupIntentResponse.client_secret;\n      console.log('Setup Intent created:', setupIntentResponse);\n  \n      const { setupIntent, error } = await this.stripe.confirmCardSetup(\n        clientSecret,\n        {\n          payment_method: {\n            card: this.card,\n            billing_details: {\n              email: formValues.email,\n            },\n          },\n        }\n      );\n  \n      if (error) {\n        const errorElement = document.getElementById('card-errors');\n        if (errorElement) {\n          errorElement.textContent = error.message;\n        }\n        await this.showAlert('Payment Error', error.message);\n        this.approve = false;\n        console.error('Error confirming card setup:', error);\n        throw new Error(error.message);\n      }\n  \n      console.log('Card setup confirmed:', setupIntent);\n  \n      const paymentMethodId = setupIntent.payment_method;\n  \n      // Fetch the payment method details from your server (which will call Stripe)\n      const paymentMethod = await this.paymentService.retrievePaymentMethod(paymentMethodId).toPromise();\n      console.log('Payment method retrieved:', paymentMethod);\n  \n      const cardDetails = paymentMethod.card;\n      const last4 = cardDetails.last4;\n  \n      console.log('Checking if card exists with email:', formValues.email, ' and last4:', last4);\n      const cardExists = await this.avatarService.checkCardExistsStripe(formValues.email, last4);\n      if (!cardExists) {\n        await this.avatarService.addCardStripe(formValues.email, paymentMethodId, last4);\n        await this.fetchSavedPaymentMethods();\n      }\n  \n      return this.paymentService.savePaymentMethod(formValues.email, paymentMethodId).toPromise();\n  \n    } catch (error) {\n      console.error('Error in processStripePayment:', error);\n      throw error;\n    }\n  }\n  \n  async deletePaymentMethod(cardId: string) {\n    await this.avatarService.deleteSavedPaymentMethod(cardId);\n    this.fetchSavedPaymentMethods(); // Refresh the list of saved payment methods\n  }\n\n  async showLoading() {\n    this.loading = await this.loadingController.create({\n      message: 'Processing payment...',\n    });\n    await this.loading.present();\n  }\n\n  async hideLoading() {\n    if (this.loading) {\n      await this.loading.dismiss();\n    }\n  }\n\n  async showAlert(header: string, message: string) {\n    const alert = await this.alertController.create({\n      header,\n      message,\n      buttons: ['OK'],\n    });\n    await alert.present();\n  }\n}\n","<ion-header class=\"ion-no-border\" [translucent]=\"true\">\n  <ion-toolbar>\n    <ion-buttons slot=\"start\">\n      <ion-button color=\"primary\">\n        <ion-back-button></ion-back-button>\n      </ion-button>\n    </ion-buttons>\n    <ion-title>Payment</ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content class=\"ion-text-center ion-padding\">\n  <ion-card class=\"ion-no-border no-shadow\">\n    <ion-card-content class=\"no-shadow\">\n      <div class=\"payment-details\" [ngClass]=\"{'slide-down': selectedProvider !== ''}\">\n        <form [formGroup]=\"paymentForm\" (ngSubmit)=\"processPayment()\">\n          <div *ngIf=\"selectedProvider === 'stripe'\">\n            <div #cardElement class=\"stripe-element\"></div>\n            <div id=\"card-errors\" role=\"alert\"></div>\n          </div>\n          <ion-button color=\"success\" shape=\"round\" expand=\"block\" size=\"large\" type=\"submit\" \n          [disabled]=\"!paymentForm.valid || !isCardComplete\">\n          Add Card\n        </ion-button>\n        </form>\n      </div>\n    </ion-card-content>\n  </ion-card>\n\n  <ion-card *ngIf=\"savedPaymentMethods.length > 0\" class=\"no-shadow\">\n    <ion-card-header>\n      <ion-card-title>Saved Payment Methods</ion-card-title>\n    </ion-card-header>\n    <ion-card-content class=\"no-shadow\">\n      <ion-radio-group [(ngModel)]=\"selectedCardId\" (ionChange)=\"setActiveCard($event)\">\n        <ion-item *ngFor=\"let method of savedPaymentMethods\">\n          <ion-label>{{ method.last4 }}</ion-label>\n          <ion-radio slot=\"start\" [value]=\"method.cardId\"></ion-radio>\n          <ion-button slot=\"end\" color=\"danger\" (click)=\"deletePaymentMethod(method.cardId)\">\n            Delete\n          </ion-button>\n        </ion-item>\n      </ion-radio-group>\n    </ion-card-content>\n  </ion-card>\n</ion-content>\n"],"names":["ElementRef","Validators","i0","PaymentPage","constructor","fb","alertController","loadingController","paymentService","avatarService","paymentForm","group","provider","required","cardId","authCode","ngOnInit","fetchSavedPaymentMethods","onPaymentProviderChange","getActiveCard","ngAfterViewInit","initializeStripeCard","cardElement","nativeElement","stripe","Stripe","elements","card","create","mount","on","event","isCardComplete","complete","cardInitialized","selectedProvider","patchValue","setTimeout","savedPaymentMethods","getSavedPaymentMethods","console","log","length","selectedCardId","error","email","user","subscribe","data","activeCardId","setActiveCard","detail","value","processPayment","valid","formValues","showLoading","paymentResult","processStripePayment","showAlert","updateFirestoreAfterPayment","errorMessage","hideLoading","approve","setupIntentResponse","createSetupIntent","toPromise","clientSecret","client_secret","setupIntent","confirmCardSetup","payment_method","billing_details","errorElement","document","getElementById","textContent","message","Error","paymentMethodId","paymentMethod","retrievePaymentMethod","cardDetails","last4","cardExists","checkCardExistsStripe","addCardStripe","savePaymentMethod","deletePaymentMethod","deleteSavedPaymentMethod","loading","present","dismiss","header","alert","buttons","selectors","viewQuery","ctx"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}