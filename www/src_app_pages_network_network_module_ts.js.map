{"version":3,"file":"src_app_pages_network_network_module_ts.js","mappings":";;;;;;;;;;;;;;;;AACuD;AAEV;;;AAE7C,MAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,sDAAW;KACvB;CACF,CAAC;AAMK,MAAM,wBAAwB;;gGAAxB,wBAAwB;qHAAxB,wBAAwB;yHAHzB,kEAAqB,CAAC,MAAM,CAAC,EAC7B,yDAAY;mIAEX,wBAAwB,oFAFzB,yDAAY;;;;;;;;;;;;;;;;;;;;;ACbuB;AACF;AAEA;AAEuB;AAEvB;;AAWtC,MAAM,iBAAiB;;kFAAjB,iBAAiB;8GAAjB,iBAAiB;kHAP1B,yDAAY;QACZ,uDAAW;QACX,uDAAW;QACX,6EAAwB;mIAIf,iBAAiB,mBAFb,sDAAW,aALxB,yDAAY;QACZ,uDAAW;QACX,uDAAW;QACX,6EAAwB;;;;;;;;;;;;;;;;;;;;;;;ACb5B;AACA;;;;;;;;ICiBEE,4DAAAA;IAA4BA,oDAAAA;IAASA,0DAAAA;;;;;;IACrCA,uDAAAA;;;;ADXI,MAAOC,WAAP,CAAkB;EAKtBC,YAAoBC,MAApB,EAAkC;IAAd;IAFZ,sBAAiB,IAAIJ,iDAAJ,CAA6B,IAA7B,CAAjB;EAE+B;;EAEvCK,QAAQ,IACP;;EAEKC,YAAY;IAAA;;IAAA;MAChB,MAAM,KAAI,CAACC,cAAL,EAAN;IADgB;EAEjB;;EAGKA,cAAc;IAAA;;IAAA;MAClB,MAAI,CAACC,OAAL,GAAe,IAAf;MACA,MAAMC,MAAM,SAASV,iEAAA,EAArB;MACA,MAAI,CAACY,WAAL,GAAmBF,MAAM,CAACG,SAA1B;;MACA,MAAI,CAACC,cAAL,CAAoBC,IAApB,CAAyB,MAAI,CAACH,WAA9B;;MACAI,OAAO,CAACC,GAAR,CAAY,0BAAZ;MAEAjB,mEAAA,CAAoB,qBAApB;QAAA,6LAA2C,WAAOU,MAAP,EAAiB;UAC1DM,OAAO,CAACC,GAAR,CAAY,4BAAZ;UACA,MAAI,CAACL,WAAL,GAAmBF,MAAM,CAACG,SAA1B;;UACA,MAAI,CAACC,cAAL,CAAoBC,IAApB,CAAyB,MAAI,CAACH,WAA9B;QACD,CAJD;;QAAA;UAAA;QAAA;MAAA;;MAMA,MAAI,CAACE,cAAL,CAAoBK,SAApB,CAA+BP,WAAD,IAAgB;QAC5C,IAAIA,WAAJ,EAAiB;UACf,MAAI,CAACH,OAAL,GAAe,KAAf;;UACA,MAAI,CAACJ,MAAL,CAAYe,QAAZ,CAAqB,CAAC,MAAD,CAArB;QACD,CAHD,MAGO;UACL,MAAI,CAACX,OAAL,GAAe,KAAf;QACD;MACF,CAPD;IAbkB;EAqBnB;;AApCqB;;;mBAAXN,aAAWD,+DAAAA,CAAAA,mDAAAA;AAAA;;;QAAXC;EAAWkB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCVxBvB,4DAAAA,qBAAkC,CAAlC,EAAkC,aAAlC;MAEIA,uDAAAA,sBAIc,CAJd,EAIc,WAJd;MAMFA,0DAAAA;MAEFA,4DAAAA;MACEA,uDAAAA;MAEAA,4DAAAA,0BAAsC,CAAtC,EAAsC,WAAtC,EAAsC,CAAtC,EAAsC,CAAtC,EAAsC,IAAtC;MAEQA,oDAAAA;MAAuDA,0DAAAA;MAIjEA,4DAAAA;MAAqEA,wDAAAA;QAAA,OAASwB,kBAAT;MAAuB,CAAvB;MACnExB,wDAAAA;MACAA,wDAAAA;MACFA,0DAAAA;;;;MAFcA,uDAAAA;MAAAA,wDAAAA;MACOA,uDAAAA;MAAAA,wDAAAA","sources":["./src/app/pages/network/network-routing.module.ts","./src/app/pages/network/network.module.ts","./src/app/pages/network/network.page.ts","./src/app/pages/network/network.page.html"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { NetworkPage } from './network.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: NetworkPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class NetworkPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { NetworkPageRoutingModule } from './network-routing.module';\n\nimport { NetworkPage } from './network.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    NetworkPageRoutingModule\n  ],\n  declarations: [NetworkPage]\n})\nexport class NetworkPageModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Network } from '@capacitor/network';\nimport { BehaviorSubject } from 'rxjs';\n\n@Component({\n  selector: 'app-network',\n  templateUrl: './network.page.html',\n  styleUrls: ['./network.page.scss'],\n})\nexport class NetworkPage implements OnInit {\n  approve: boolean;\n  isConnected: boolean;\n  private networkStatus$ = new BehaviorSubject<boolean>(true);\n\n  constructor(private router: Router) { }\n\n  ngOnInit() {\n  }\n\n  async CheckNetwork(){\n    await this.monitorNetwork();\n  }  \n\n\n  async monitorNetwork() {\n    this.approve = true;\n    const status = await Network.getStatus();\n    this.isConnected = status.connected;\n    this.networkStatus$.next(this.isConnected);\n    console.log(\"Monitor Network Called..\");\n\n    Network.addListener('networkStatusChange', async (status) => {\n      console.log(\"Monitoring Network........\");\n      this.isConnected = status.connected;\n      this.networkStatus$.next(this.isConnected);\n    });\n\n    this.networkStatus$.subscribe((isConnected) => {\n      if (isConnected) {\n        this.approve = false;\n        this.router.navigate(['home']);\n      } else {\n        this.approve = false;\n      }\n    });\n  }\n\n\n}\n","<ion-header class=\"ion-no-border\">\n  <ion-toolbar>\n    <ion-buttons slot=\"start\">\n      <!-- <ion-button color=\"primary\">\n        <ion-back-button></ion-back-button>\n      </ion-button> -->\n    </ion-buttons>\n    <ion-title></ion-title>\n  </ion-toolbar>\n</ion-header>\n<ion-content class=\"ion-padding\">\n  <ion-img src=\"../assets/imgs/No connection-pana.svg\"></ion-img>\n\n  <ion-list-header class=\"ion-padding\" >\n    <ion-label color=\"primary\" class=\"ion-text-center\">\n      <h1>Network Error, Please Check Your Network and Try again.</h1>\n    </ion-label>\n</ion-list-header>\n\n<ion-button size=\"large\" shape=\"round\" type=\"submit\" color=\"primary\" (click)=\"CheckNetwork()\" expand=\"block\">\n  <ion-label *ngIf=\"!approve\">Try Again</ion-label> \n  <ion-progress-bar *ngIf=\"approve\"color='light' type=\"indeterminate\"></ion-progress-bar>\n</ion-button>\n</ion-content>\n"],"names":["Network","BehaviorSubject","i0","NetworkPage","constructor","router","ngOnInit","CheckNetwork","monitorNetwork","approve","status","getStatus","isConnected","connected","networkStatus$","next","console","log","addListener","subscribe","navigate","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}